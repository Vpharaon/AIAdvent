package com.farionik.aiadvent.presentation.mvi

import com.arkivanov.mvikotlin.core.store.Reducer
import com.arkivanov.mvikotlin.core.store.Store
import com.arkivanov.mvikotlin.core.store.StoreFactory
import com.arkivanov.mvikotlin.extensions.coroutines.CoroutineExecutor
import com.farionik.aiadvent.domain.model.ChatMessage
import com.farionik.aiadvent.domain.usecase.SendMessageUseCase
import com.farionik.aiadvent.domain.usecase.GetCountryInfoUseCase
import com.farionik.aiadvent.domain.usecase.ValidateCountryNameUseCase
import kotlinx.coroutines.launch

class ChatStoreFactory(
    private val storeFactory: StoreFactory,
    private val sendMessageUseCase: SendMessageUseCase,
    private val getCountryInfoUseCase: GetCountryInfoUseCase,
    private val validateCountryNameUseCase: ValidateCountryNameUseCase,
    private val apiKey: String,
) {

    fun create(): ChatStore =
        object : ChatStore, Store<ChatStore.Intent, ChatStore.State, ChatStore.Label> by storeFactory.create(
            name = "ChatStore",
            initialState = ChatStore.State(),
            executorFactory = ::ExecutorImpl,
            reducer = ReducerImpl
        ) {}

    private sealed interface Message {
        data class InputTextChanged(val text: String) : Message
        data class UserMessageAdded(val message: String) : Message
        data object LoadingStarted : Message
        data class AiMessageAdded(val response: String, val rawJson: String? = null) : Message
        data class LoadingFailed(val error: String) : Message
    }

    private inner class ExecutorImpl : CoroutineExecutor<ChatStore.Intent, Nothing, ChatStore.State, Message, ChatStore.Label>() {
        override fun executeIntent(intent: ChatStore.Intent, getState: () -> ChatStore.State) {
            when (intent) {
                is ChatStore.Intent.UpdateInputText -> {
                    dispatch(Message.InputTextChanged(intent.text))
                }
                is ChatStore.Intent.SendMessage -> {
                    sendMessage(intent.message)
                }
                is ChatStore.Intent.GetCountryInfo -> {
                    getCountryInfo(intent.countryName)
                }
            }
        }

        private fun sendMessage(message: String) {
            dispatch(Message.UserMessageAdded(message))
            scope.launch {
                dispatch(Message.LoadingStarted)
                sendMessageUseCase(message, apiKey)
                    .onSuccess { content ->
                        dispatch(Message.AiMessageAdded(content))
                    }
                    .onFailure { error ->
                        val errorMessage = "–û—à–∏–±–∫–∞: ${error.message}"
                        dispatch(Message.LoadingFailed(errorMessage))
                        publish(ChatStore.Label.Error(errorMessage))
                    }
            }
        }

        private fun getCountryInfo(countryName: String) {
            dispatch(Message.UserMessageAdded("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–µ: $countryName"))
            scope.launch {
                dispatch(Message.LoadingStarted)

                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–æ–π
                validateCountryNameUseCase(countryName, apiKey)
                    .onSuccess { isCountry ->
                        if (isCountry) {
                            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            getCountryInfoUseCase(countryName, apiKey)
                                .onSuccess { countryInfo ->
                                    val response = buildString {
                                        appendLine("üåç ${countryInfo.countryName}")
                                        appendLine("–°—Ç–æ–ª–∏—Ü–∞: ${countryInfo.capital}")
                                        appendLine("–ù–∞—Å–µ–ª–µ–Ω–∏–µ: ${countryInfo.population}")
                                        appendLine("–ü–ª–æ—â–∞–¥—å: ${countryInfo.area} –∫–º¬≤")
                                        appendLine("–†–µ–≥–∏–æ–Ω: ${countryInfo.region}")
                                        appendLine("–Ø–∑—ã–∫: ${countryInfo.officialLanguage}")
                                        appendLine("–í–∞–ª—é—Ç–∞: ${countryInfo.currency}")
                                        appendLine("–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã: ${countryInfo.callingCode}")
                                        appendLine("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${countryInfo.timeZone}")
                                        if (countryInfo.interestingFacts.isNotEmpty()) {
                                            appendLine("\n–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã:")
                                            countryInfo.interestingFacts.forEach { fact ->
                                                appendLine("‚Ä¢ $fact")
                                            }
                                        }
                                    }
                                    dispatch(Message.AiMessageAdded(response, countryInfo.rawJson))
                                }
                                .onFailure { error ->
                                    val errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${error.message}"
                                    dispatch(Message.LoadingFailed(errorMessage))
                                    publish(ChatStore.Label.Error(errorMessage))
                                }
                        } else {
                            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞–Ω–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            val errorMessage = "‚ùå \"$countryName\" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω—ã.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ë–µ–ª–∞—Ä—É—Å—å, –°–®–ê –∏ —Ç.–¥.)"
                            dispatch(Message.LoadingFailed(errorMessage))
                        }
                    }
                    .onFailure { error ->
                        val errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}"
                        dispatch(Message.LoadingFailed(errorMessage))
                        publish(ChatStore.Label.Error(errorMessage))
                    }
            }
        }
    }

    private object ReducerImpl : Reducer<ChatStore.State, Message> {
        override fun ChatStore.State.reduce(msg: Message): ChatStore.State =
            when (msg) {
                is Message.InputTextChanged -> copy(inputText = msg.text)
                is Message.UserMessageAdded -> copy(
                    messages = messages + ChatMessage(text = msg.message, isUser = true),
                    inputText = "" // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                )
                is Message.LoadingStarted -> copy(isLoading = true, error = null)
                is Message.AiMessageAdded -> copy(
                    isLoading = false,
                    messages = messages + ChatMessage(text = msg.response, isUser = false, rawJson = msg.rawJson),
                    error = null
                )
                is Message.LoadingFailed -> copy(
                    isLoading = false,
                    messages = messages + ChatMessage(text = msg.error, isUser = false),
                    error = msg.error
                )
            }
    }
}